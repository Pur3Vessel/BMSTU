PROGRAM -> FUNCTION PROGRAM | .
FUNCTION -> IDENT '(' ARGS ')' ':' TYPE '=' EXPR ';' .
ARGS -> ARG ARGS1 | .
ARG -> IDENT ':' TYPE .
ARGS1 -> ',' ARG ARGS1 | .
TYPE -> 'int' | 'bool' | "[" TYPE "]" | TUPLE .
TUPLE -> "(" TYPE "," TYPE TUPLE1 ")" .
TUPLE1 -> "," TYPE TUPLE1 | .
EXPR -> "if" BOOL_EXPR "then" EXPR "else" EXPR | SIMP_EXPR | BOOL_CONST.
BOOL_EXPR -> BOOL_EXPR 'or' BOOL_EXPR1 | BOOL_EXPR1.
BOOL_EXPR1 -> BOOL_EXPR1 'and' BOOL_EXPR2 | BOOL_EXPR2.
BOOL_EXPR2 -> IDENT | FUNC_CALL | '(' BOOL_EXPR ')' | BOOL_CONST.
BOOL_CONST -> 'true' | 'false'.
SIMP_EXPR -> LIST_EXPR | TUPLE_EXPR | ARITH_EXPR.
LIST_EXPR -> "[" IN_LIST "]".
IN_LIST -> EXPR IN_LIST1 | .
IN_LIST1 -> "," EXPR IN_LIST1 | .
TUPLE_EXPR -> "(" EXPR "," EXPR TUPLE_EXPR1 ")".
TUPLE_EXPR1 -> "," EXPR TUPLE_EXPR1 | .
ARITH_EXPR -> ARITH_EXPR "+" MULT_EXPR | ARITH_EXPR "-" MULT_EXPR | MULT_EXPR.
MULT_EXPR ->  MULT_EXPR "*" ELEM | MULT_EXPR "/" ELEM | ELEM.
ELEM -> NUMBER | IDENT | FUNC_CALL .
FUNC_CALL -> IDENT "(" IN_LIST ")".