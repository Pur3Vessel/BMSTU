(load "trace.scm")
(load "unit-test.scm")

(define (ref x n . fill)
  (define (peregon ys k)
    (if (null? k)
        ys
        (peregon (append ys (cons (car k) '())) (cdr k))))
  (define (my-string-string-set ys xs n k)
    (if (null? xs)
        (if (= n 0)
            (list->string (peregon ys k))
            (list->string ys))
        (if (= n 0)
            (my-string-string-set (peregon ys k) xs (- n 1) k)
            (my-string-string-set (append ys (cons (car xs) '())) (cdr xs) (- n 1) k))))
  (define (my-list-set ys xs n k)
    (if (null? xs)
        (if (= n 0)
            (append ys (cons k '()))
            ys)
        (if (= n 0)
            (my-list-set (append ys (cons k '())) xs (- n 1) k)
            (my-list-set (append ys (cons (car xs) '())) (cdr xs) (- n 1) k))))
  (define (my-vector-set ys xs n k)
    (if (null? xs)
        (if (= n 0)
            (list->vector (append ys (cons k '())))
            (list->vector ys))
        (if (= n 0)
            (my-vector-set (append ys (cons k '())) xs (- n 1) k)
            (my-vector-set (append ys (cons (car xs) '())) (cdr xs) (- n 1) k))))
  (define (my-string-set ys xs n k)
    (if (string? k)
        (my-string-string-set '() xs n (string->list k))
        (and (char? k)
             (if (null? xs)
                 (if (= n 0)
                     (list->string (append ys (cons k '())))
                     (list->string ys))
                 (if (= n 0)
                     (my-string-set (append ys (cons k '())) xs (- n 1) k)
                     (my-string-set (append ys (cons (car xs) '())) (cdr xs) (- n 1) k))))))                  
  (if (null? fill)
      (cond ((list? x) (and (<= n (- (length x) 1))
                            (>= n 0)
                            (list-ref x n)))
            ((vector? x) (and (<= n (- (vector-length x) 1))
                              (>= n 0)
                              (vector-ref x n)))
            ((string? x) (and (<= n (- (string-length x) 1))
                              (>= n 0)
                              (string-ref x n)))
            (else (display 'not_correct) #f))
      (cond   ((list? x) (and (<= (- n 1) (- (length x) 1))
                              (>= n 0)
                              (my-list-set '() x n (car fill))))
                         ((vector? x) (and (<= (- n 1) (- (vector-length x) 1))
                                           (>= n 0)
                                           (my-vector-set '() (vector->list x) n (car fill))))
                         ((string? x) (and (<= (- n 1) (- (string-length x) 1))
                                           (>= n 0)
                                           (my-string-set '() (string->list x) n (car fill))))
                         (else (display 'not_correct) #f))))



(define the-tests
  (list (test (ref '(1 2 3) 1) 2)
        (test (ref #(1 2 3) 1) 2)
        (test (ref "123" 1) #\2)
        (test (ref "123" 3) #f)
        (test (ref '(1 2 3) 1 0) '(1 0 2 3))
        (test (ref #(1 2 3) 1 0) #(1 0 2 3))
        (test (ref #(1 2 3) 1 #\0) #(1 #\0 2 3))
        (test (ref "123" 1 0) #f)
        (test (ref "123" 3 #\4) "1234")
        (test (ref "123" 5 #\4) #f)
        (test (ref "abcd" 2 "ef") "abefcd")))

         
(run-tests the-tests)



       
