(define (interpret program stack)
  (define (make-flag st op)
    (cond
     ((eq? op '=) (if (= (car st) (cadr st)) (cons -1 (cddr st)) (cons 0 (cddr st))))
     ((eq? op '>) (if (< (car st) (cadr st)) (cons -1 (cddr st)) (cons 0 (cddr st))))
     ((eq? op '<) (if (> (car st) (cadr st)) (cons -1 (cddr st)) (cons 0 (cddr st))))
     ((eq? op '=) (if (> (car st) (cadr st)) (cons -1 (cddr st)) (cons 0 (cddr st))))
     ((eq? op 'and) (if (or (= (car st) 0) (= (cadr st) 0)) (cons 0 (cddr st)) (cons -1 (cddr st))))
     ((eq? op 'or) (if (and (= (car st) 0) (= (cadr st) 0)) (cons 0 (cddr st)) (cons -1 (cddr st))))
     ((eq? op 'not) (if (= (car st) 0) (cons -1 (cadr st)) (cons 0 (cadr st))))))
  (define (make-article pr cou st r-st vocab)
    (let ((c-w (vector-ref pr cou)))
      (if (eq? c-w 'end)
          (main-p pr (+ 1 cou) st r-st vocab)
          (make-article pr (+ 1 cou) st r-st vocab))))
  (define (false-if-rec pr cou st r-st vocab mark)
    (let ((c-w (vector-ref pr cou)))
      (cond
        ((eq? c-w 'if) (false-if-rec pr (+ 1 cou) st r-st vocab (+ 1 mark)))
        ((eq? c-w 'endif) (if (= mark 1)
                               (false-if pr (+ 1 cou) st r-st vocab)
                               (false-if-rec pr (+ 1 cou) sr r-st vocab (- mark 1))))
        (else (false-if-rec pr (+ 1 cou) st r-st vocab mark)))))
      
  (define (false-if pr cou st r-st vocab)
    (let ((c-w (vector-ref pr cou)))
      (cond
        ((eq? c-w 'if) (false-if-rec pr (+ 1 cou) st r-st vocab 1))
        ((eq? c-w 'endif) (if (eq? (vector-ref pr (+ 1 cou)) 'else)
                              (main-p pr (+ 2 cou) st r-st vocab)
                              (main-p pr (+ 1 cou) st r-st vocab)))
        (else (false-if pr (+ 1 cou) st r-st vocab)))))
        
  (define (false-while pr cou st r-st vocab)
    (let ((c-w (vector-ref pr cou)))
      (if (eq? c-w 'end-while)
          (main-p pr (+ 1 cou) st r-st vocab)
          (false-while pr (+ 1 cou) st r-st vocab))))
  (define (skip-else pr cou st r-st vocab)
    (let ((c-w (vector-ref pr cou)))
      (if (eq? c-w 'end-else)
          (main-p pr (+ 1 cou) st r-st vocab)
          (skip-else pr (+ 1 cou) st r-st vocab))))
  (define (break pr cou st r-st vocab)
    (let ((c-w (vector-ref pr cou)))
      (cond
        ((or (eq? c-w 'end-while) (eq? c-w 'end-repeat)) (main-p pr (+ 1 cou) st r-st vocab))
        ((eq? c-w 'loop) (main-p pr (+ 1 cou) st r-st (cddr vocab)))
        (else (break pr (+ 1 cou) st r-st vocab)))))
  (define (continue pr cou st r-st vocab)
    (let ((c-w (vector-ref pr cou)))
      (cond
        ((or (eq? c-w 'end-while) (eq? c-w 'end-repeat)) (main-p pr (car r-st) st (cdr r-st) vocab))
        ((eq? c-w 'loop) (main-p pr (car r-st) (cdr stack) (cdr r-st) (cons (+ (car vocab) (car stack)) (cdr vocab))))
        (else (continue pr (+ 1 cou) st r-st vocab)))))
  (define (switch pr cou st r-st vocab key)
    (let ((c-w (vector-ref pr cou)))
      (cond
        ((eq? c-w 'case) (if (= (vector-ref pr (+ 1 cou)) key)
                             (main-p pr (+ 2 cou) st r-st vocab)
                             (switch pr (+ 1 cou) st r-st vocab key)))
        ((eq? c-w 'break-switch) (main-p pr (+ 1 cou) st (cdr r-st) vocab))
        (else (switch pr (+ 1 cou) st r-st vocab key)))))
  (define (find-sw pr cou)
    (let ((c-w (vector-ref pr cou)))
      (if (eq? c-w 'break-switch)
          (+ 1 cou)
          (find-sw pr (+ 1 cou)))))
  (define (main-p pr cou st r-st vocab)
    (if (>= cou (vector-length pr))
        st
    (let ((c-w (vector-ref pr cou)))
      (cond
       ((number? c-w) (main-p pr (+ 1 cou) (cons c-w st) r-st vocab))
       ((eq? c-w '+) (main-p pr (+ 1 cou) (cons (+ (car st) (cadr st)) (cddr st)) r-st vocab))
       ((eq? c-w '-) (main-p pr (+ 1 cou) (cons (- (cadr st) (car st)) (cddr st)) r-st vocab))
       ((eq? c-w '*) (main-p pr (+ 1 cou) (cons (* (cadr st) (car st)) (cddr st)) r-st vocab))
       ((eq? c-w '/) (main-p pr (+ 1 cou) (cons (quotient (cadr st) (car st)) (cddr st)) r-st vocab))
       ((eq? c-w 'mod) (main-p pr (+ 1 cou) (cons (remainder (cadr st) (car st)) (cddr st)) r-st vocab))
       ((eq? c-w 'neg) (main-p pr (+ 1 cou) (cons (* -1 (car st)) (cdr st)) r-st vocab))
       ((or (eq? c-w '=) (eq? c-w '>) (eq? c-w '<) (eq? c-w 'and) (eq? c-w 'or) (eq? c-w 'not)) (main-p pr (+ 1 cou) (make-flag st c-w) r-st vocab))
       ((eq? c-w 'drop) (main-p pr (+ 1 cou) (cdr st) r-st vocab))
       ((eq? c-w 'swap) (main-p pr (+ 1 cou) (cons (cadr st) (cons (car st) (cddr st))) r-st vocab))
       ((eq? c-w 'dup) (main-p pr (+ 1 cou) (cons (car st) st) r-st vocab))
       ((eq? c-w 'over) (main-p pr (+ 1 cou) (cons (cadr st) st) r-st vocab))
       ((eq? c-w 'rot) (main-p pr (+ 1 cou) (cons (caddr st) (cons (cadr st) (cons (car st) (cdddr st)))) r-st vocab))
       ((eq? c-w 'depth) (main-p pr (+ 1 cou) (cons (length st) st) r-st vocab))
       ((eq? c-w 'define) (make-article pr (+ 1 cou) st r-st (append vocab (list (list (vector-ref pr (+ 1 cou)) (+ 2 cou))))))
       ((or (eq? c-w 'end) (eq? c-w 'exit)) (main-p pr (car r-st) st (cdr r-st) vocab))
       ((eq? c-w 'if) (if (= (car st) 0)
                          (false-if pr (+ 1 cou) (cdr st) r-st vocab)
                          (main-p pr (+ 1 cou) (cdr st) r-st vocab)))
       ((eq? c-w 'endif) (main-p pr (+ 1 cou) st r-st vocab))
       ((eq? c-w 'while) (if (= (car st) 0)
                         (false-while pr (+ 1 cou) (cdr st) r-st vocab)
                         (main-p pr (+ 1 cou) (cdr st) (cons cou r-st) vocab)))
       ((eq? c-w 'end-while) (main-p pr (car r-st) st (cdr r-st) vocab))
       ((eq? c-w 'repeat) (main-p pr (+ 1 cou) st (cons cou r-st) vocab))
       ((eq? c-w 'end-repeat) (if (= (car st) 0)
                                  (main-p pr (+ 1 cou) (cdr st) (cdr r-st) vocab)
                                  (main-p pr (car r-st) (cdr st) (cdr r-st) vocab)))
       ((eq? c-w 'do) (main-p pr (+ 1 cou) (cddr st) (cons (+ 1 cou) r-st) (cons (car st) (cons (cadr st) vocab))))
       ((eq? c-w 'loop) (if (> (+ (car vocab) (car stack)) (cadr vocab))
                            (main-p pr (+ 1 cou) (cdr st) (cdr r-st) (cddr vocab))
                            (main-p pr (car r-st) (cdr st) r-st (cons (+ (car vocab) (car stack)) (cdr vocab)))))
       ((eq? c-w 'else) (skip-else pr (+ 1 cou) st r-st vocab))
       ((eq? c-w 'end-else) (main-p pr (+ 1 cou) st r-st vocab))
       ((eq? c-w 'break) (break pr (+ 1 cou) st (cdr r-st) vocab))
       ((eq? c-w 'continue) (continue pr (+ 1 cou) st r-st vocab))
       ((eq? c-w 'switch) (switch pr (+ 1 cou) (cdr st) (cons (find-sw pr cou) r-st) vocab (car st)))
       ((eq? c-w 'break-case) (main-p pr (car r-st) st (cdr r-st) vocab))
       ((eq? c-w 'tail) (main-p pr (cadr (assoc (vector-ref pr (+ 1 cou)) vocab)) st r-st vocab))
       ((eq? c-w '&) (main-p pr (+ 2 cou) (cons (assoc (vector-ref pr (+ 1 cou)) vocab) st) r-st vocab))
       ((eq? c-w 'call) (main-p pr (cadr (car st)) (cdr st) (cons (+ 1 cou) r-st) vocab)) 
       (else (main-p pr (cadr (assoc c-w vocab)) st (cons (+ 1 cou) r-st) vocab))))))
  (main-p program 0 stack '() '()))
       
      