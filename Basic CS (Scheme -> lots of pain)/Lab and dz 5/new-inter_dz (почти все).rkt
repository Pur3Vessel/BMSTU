(define (interpret program stack)
  (define (make-flag st op)
    (cond
     ((eq? op '=) (if (= (car st) (cadr st)) (cons -1 (cddr st)) (cons 0 (cddr st))))
     ((eq? op '>) (if (< (car st) (cadr st)) (cons -1 (cddr st)) (cons 0 (cddr st))))
     ((eq? op '<) (if (> (car st) (cadr st)) (cons -1 (cddr st)) (cons 0 (cddr st))))
     ((eq? op '=) (if (> (car st) (cadr st)) (cons -1 (cddr st)) (cons 0 (cddr st))))
     ((eq? op 'and) (if (or (= (car st) 0) (= (cadr st) 0)) (cons 0 (cddr st)) (cons -1 (cddr st))))
     ((eq? op 'or) (if (and (= (car st) 0) (= (cadr st) 0)) (cons 0 (cddr st)) (cons -1 (cddr st))))
     ((eq? op 'not) (if (= (car st) 0) (cons -1 (cadr st)) (cons 0 (cadr st))))))
  (define (make-article pr cou st r-st vocab)
    (let ((c-w (vector-ref pr cou)))
      (if (eq? c-w 'end)
          (main-p pr (+ 1 cou) st r-st vocab)
          (make-article pr (+ 1 cou) st r-st vocab))))
  (define (false-if pr cou st r-st vocab)
    (let ((c-w (vector-ref pr cou)))
      (if (eq? c-w 'endif)
          (main-p pr (+ 1 cou) st r-st vocab)
          (false-if pr (+ 1 cou) st r-st vocab))))
  (define (main-p pr cou st r-st vocab)
    (if (>= cou (vector-length pr))
        st
    (let ((c-w (vector-ref pr cou)))
      (cond
       ((number? c-w) (main-p pr (+ 1 cou) (cons c-w st) r-st vocab))
       ((eq? c-w '+) (main-p pr (+ 1 cou) (cons (+ (car st) (cadr st)) (cddr st)) r-st vocab))
       ((eq? c-w '-) (main-p pr (+ 1 cou) (cons (- (cadr st) (car st)) (cddr st)) r-st vocab))
       ((eq? c-w '*) (main-p pr (+ 1 cou) (cons (* (cadr st) (car st)) (cddr st)) r-st vocab))
       ((eq? c-w '/) (main-p pr (+ 1 cou) (cons (quotient (cadr st) (car st)) (cddr st)) r-st vocab))
       ((eq? c-w 'mod) (main-p pr (+ 1 cou) (cons (remainder (cadr st) (car st)) (cddr st)) r-st vocab))
       ((eq? c-w 'neg) (main-p pr (+ 1 cou) (cons (* -1 (car st)) (cdr st)) r-st vocab))
       ((or (eq? c-w '=) (eq? c-w '>) (eq? c-w '<) (eq? c-w 'and) (eq? c-w 'or) (eq? c-w 'not)) (main-p pr (+ 1 cou) (make-flag st c-w) r-st vocab))
       ((eq? c-w 'drop) (main-p pr (+ 1 cou) (cdr st) r-st vocab))
       ((eq? c-w 'swap) (main-p pr (+ 1 cou) (cons (cadr st) (cons (car st) (cddr st))) r-st vocab))
       ((eq? c-w 'dup) (main-p pr (+ 1 cou) (cons (car st) st) r-st vocab))
       ((eq? c-w 'over) (main-p pr (+ 1 cou) (cons (cadr st) st) r-st vocab))
       ((eq? c-w 'rot) (main-p pr (+ 1 cou) (cons (caddr st) (cons (cadr st) (cons (car st) (cdddr st)))) r-st vocab))
       ((eq? c-w 'depth) (main-p pr (+ 1 cou) (cons (length st) st) r-st vocab))
       ((eq? c-w 'define) (make-article pr (+ 1 cou) st r-st (append vocab (list (list (vector-ref pr (+ 1 cou)) (+ 2 cou))))))
       ((or (eq? c-w 'end) (eq? c-w 'exit)) (main-p pr (car r-st) st (cdr r-st) vocab))
       ((eq? c-w 'if) (if (= (car st) 0)
                          (false-if pr (+ 1 cou) (cdr st) r-st vocab)
                          (main-p pr (+ 1 cou) (cdr st) r-st vocab)))
       ((eq? c-w 'endif) (main-p pr (+ 1 cou) st r-st vocab))
       (else (main-p pr (cadr (assoc c-w vocab)) st (cons (+ 1 cou) r-st) vocab))))))
  (main-p program 0 stack '() '()))